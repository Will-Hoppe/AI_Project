# -*- coding: utf-8 -*-
"""TranscriptToDataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nig36JH2deYPYwHM6GSBH-kUNFCxwm9D
"""

!pip install openai -q

import openai
import csv
import re

def add_to_dataset(text, csvwriter, description, title, tags):
  # Split the text into pairs of prompts and responses
  pairs = re.findall(r'P:(.*?)R:(.*?)\n', text, re.DOTALL)

  for pair in pairs:
      prompt = pair[0].strip()
      response = pair[1].strip()
      csvwriter.writerow([prompt, response, title, description, tags])

openai.api_key = # insert API key here
MODEL = "gpt-4"
count = 0
with open("transcript_data.csv", "r", newline="") as csvfile:
  with open('output.csv', 'w', newline='') as csvfile_output:
    with open("talk_data.csv", "r", newline="") as talk_file:
      csvreader = csv.reader(csvfile)
      talkreader = csv.reader(talk_file)
      csvwriter = csv.writer(csvfile_output)
      csvwriter.writerow(["Prompt", "Response", "Title", "Description", "Tags"])

      # Skip the header
      next(csvreader, None)
      next(talkreader, None)

      # Iterate through the lines
      for row in csvreader:
        talk = next(talkreader, None)
        description, title, tags = talk[0], talk[2], eval(talk[5])

        if count == 3:
          break
        # Check if the first value is "None" and skip the line if it is
        if row[0] == "None":
            continue

        transcript = f"Transcript Title: {row[0]}\nTranscript: {row[1]}"
        print(transcript)
        print(count)

        try:
            completion = openai.ChatCompletion.create(
          model= MODEL,
          messages = [
            {"role": "system", "content": "You are a reverse prompt generator. This means that I will give you the title and transcript from a Ted Talk, and it is your job to generate a series of prompts inserted between sections of the transcript, so every section of the transcript acts as the response to its corresponding prompt. You should insert a prompt between every 3-7 sentences. These prompts can be questions or whatever best fits the context of the following text of the next section of the transcript. Only include sections from the transcript that would be considered educational, and do not change what is said in the transcript/response except to fix grammatical errors or remove unnecessary text. Before every question, put \"P:\" and before every answer put \"R:\". Remember it should be split every 3-7 sentences and the only changes to the transcript should be grammatical or to remove sections where the prompt and response could not be seen as educational. You should only choose what you deem to be the most educational and cohesive prompt/response pairings which may consist of 5-10 sections from each transcript."},
            {"role": "user", "content": transcript}
          ]
        )

        add_to_dataset(completion.choices[0].message["content"], csvwriter, description, title, tags)
        count += 1

        except Exception as api_error:
            print(f"API call error: {str(api_error)}")
            continue  # Continue to the next entry if there's an API error